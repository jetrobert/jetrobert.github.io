{"meta":{"title":"AI","subtitle":"Machine Learning | Deep Learning | NLP | Computer Vision","description":"Dream it. Believe it. Make it.","author":"Steven Cheng","url":"https://steven-cheng-com.github.io","root":"/"},"pages":[{"title":"About","date":"2019-03-06T14:08:40.000Z","updated":"2020-04-11T04:23:37.718Z","comments":true,"path":"about/index.html","permalink":"https://steven-cheng-com.github.io/about/index.html","excerpt":"","text":"About MeI’m Steven, a machine learning engineer who loves building AI products. I’d love to combine my passion for learning with my programming skills to continue building AI-based products for more people. Contacts GitHub: Steven Cheng Twitter: Steven Cheng Email: jetrobert19@gmail.com"}],"posts":[{"title":"Automatic Clustering with Silhouette Analysis on Agglomerative Hierarchical Clustering","slug":"automatic-clustering-with-silhouette-analysis-on-agglomerative-hierarchical-clustering","date":"2020-03-22T02:32:33.000Z","updated":"2020-04-18T03:42:11.413Z","comments":true,"path":"2020/03/22/automatic-clustering-with-silhouette-analysis-on-agglomerative-hierarchical-clustering/","link":"","permalink":"https://steven-cheng-com.github.io/2020/03/22/automatic-clustering-with-silhouette-analysis-on-agglomerative-hierarchical-clustering/","excerpt":"","text":"&nbsp; Steven Cheng Intro Automatic clustering algorithms are algorithms that can perform clustering without prior knowledge of data sets, and determine the optimal number of clusters even in the presence of noise and outlier points. Silhouette Analysis Silhouette analysis can be used to study the separation distance between the resulting clusters. The silhouette plot displays a measure of how close each point in one cluster is to points in the neighboring clusters. The silhouette score is a measure of how similar an object is to its own cluster (cohesion) compared to other clusters (separation). The silhouette ranges from −1 to +1, where a high value indicates that the object is well matched to its own cluster and poorly matched to neighboring clusters. If most objects have a high value, then the clustering configuration is appropriate. If many points have a low or negative value, then the clustering configuration may have too many or too few clusters. Thus silhouette analysis can be used to choose an optimal number for clusters automatically. Agglomerative Hierarchical Clustering Hierarchical clustering algorithms fall into 2 branches: top-down or bottom-up. Bottom-up algorithms treat each data point as a single cluster at the outset and then successively merge (or agglomerate) pairs of clusters until all clusters have been merged into a single cluster that contains all data points. Bottom-up hierarchical clustering is therefore called hierarchical agglomerative clustering or HAC. This hierarchy of clusters is represented as a tree (or dendrogram). The root of the tree is the unique cluster that gathers all the samples, the leaves being the clusters with only one sample. The Steps of Hierarchical clustering: We start by treating each data point as a single cluster i.e. if there are N data points in our dataset then we have N clusters. We then select a distance metric that measures the distance between two clusters. As an example, we will use average linkage which defines the distance between two clusters to be the average distance between data points in the first cluster and data points in the second cluster. On each iteration, two clusters are combined into one. The two clusters to be combined are selected as those with the smallest average linkage. I.e. according to our selected distance metric, these two clusters have the smallest distance between each other and therefore are the most similar and should be combined. Step 2 is repeated until we reach the root of the tree that one cluster contains all data points. In this way we can select how many clusters we want in the end simply by choosing when to stop combining the clusters i.e. when we stop building the tree! Automatic ClusteringSince hierarchical clustering does not require us to specify the number of clusters and we can even select which number of clusters looks best since we are building a tree. Here we use the silhouette score to help us determine choosing the optimal number of clusters for clustering task automatically. An example of auto-clustering with silhouette analysis on agglomerative hierarchical clustering is shown as follows. 12345678import pandas as pdimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.decomposition import PCAfrom sklearn.cluster import AgglomerativeClusteringfrom sklearn.preprocessing import StandardScaler, normalizefrom sklearn.metrics import silhouette_scoreimport scipy.cluster.hierarchy as shc Load and clean the data: 1234567X = pd.read_csv('customer_info.csv')# Dropping the CUST_ID column from the dataX = X.drop('CUST_ID', axis = 1)# Handling the missing valuesX.fillna(method ='ffill', inplace = True) Preprocess the data: 12345678910# Scaling the data so that all the features become comparablescaler = StandardScaler()X_scaled = scaler.fit_transform(X)# Normalizing the data so that the data approximately # follows a Gaussian distributionX_normalized = normalize(X_scaled)# Converting the numpy array into a pandas DataFrameX_normalized = pd.DataFrame(X_normalized) Reduce the dimensionality: 1234pca = PCA(n_components = 2)X_new = pca.fit_transform(X_normalized)df_new = pd.DataFrame(X_new)df_new.columns = ['P1', 'P2'] Visualize the dendograms: 123plt.figure(figsize =(8, 8))plt.title('Visualising Clustering')Dendrogram = shc.dendrogram((shc.linkage(df_new, method ='ward'))) Evaluate the clustering models: 123456789101112131415161718k = range(2,10)ac_list = [AgglomerativeClustering(n_clusters = i) for i in k]# Appending the silhouette scoressilhouette_scores = &#123;&#125;silhouette_scores.fromkeys(k)for i,j in enumerate(k): silhouette_scores[j] = silhouette_score(df_new, ac_list[i].fit_predict(df_new))# Plottingy = list(silhouette_scores.values())plt.bar(k, y)plt.xlabel('Number of clusters', fontsize = 20)plt.ylabel('S(i)', fontsize = 20)plt.show() From the result above, we can conclude that 3 clusters obtain the highest silhouette score so the optimal number of clusters is 3 in this case. The complete code and dataset can be found here Reference[1] Wikipedia-Automatic clustering algorithms[2] https://scikit-learn.org/stable/auto_examples/cluster/plot_kmeans_silhouette_analysis.html[3] The 5 Clustering Algorithms Data Scientists Need to Know","categories":[{"name":"ML","slug":"ML","permalink":"https://steven-cheng-com.github.io/categories/ML/"}],"tags":[{"name":"Hierarchical Clustering","slug":"Hierarchical-Clustering","permalink":"https://steven-cheng-com.github.io/tags/Hierarchical-Clustering/"},{"name":"Silhouette","slug":"Silhouette","permalink":"https://steven-cheng-com.github.io/tags/Silhouette/"}],"author":"Steven Cheng"},{"title":"Object Detection with Luminoth Step by Step","slug":"object-detection-with-luminoth-step-by-step","date":"2020-02-14T09:19:36.000Z","updated":"2020-04-09T06:59:40.428Z","comments":true,"path":"2020/02/14/object-detection-with-luminoth-step-by-step/","link":"","permalink":"https://steven-cheng-com.github.io/2020/02/14/object-detection-with-luminoth-step-by-step/","excerpt":"","text":"&nbsp; Steven Cheng Intro Luminoth is an open source toolkit for computer vision. It supports object detection and it’s built in Python, using TensorFlow. The code is open source and available on GitHub. Detecting Objects with a Pre-trained ModelThe first thing is being familiarized with the Luminoth CLI tool, that is, the tool that you interact with using the lumi command. This is the main gate to Luminoth, allowing you to train new models, evaluate them, use them for predictions, manage the checkpoints and more. If we want Luminoth to predict the objects present in one of pictures (image.jpg). The way to do that is by running the following command: 1lumi predict image.jpg The result will be like this: 123Found 1 files to predict.Neither checkpoint not config specified, assuming `accurate`.Checkpoint not found. Check remote repository? [y/N]: Since you didn’t tell Luminoth what an “object” is for you, nor have taught it how to recognize said objects. So one way to do this is to use a pre-trained model that has been trained to detect popular types of objects. E.g., it can be a model trained with COCO dataset or Pascal VOC. What’s more, each pre-trained model might be associated with a different algorithm. The checkpoints correspond to the weights of a particular model (Faster R-CNN or SSD), trained with a particular dataset. The case of “accurate” is just a label for a particular Deep Learning model underneath, here, Faster R-CNN, trained with images from the COCO dataset. After the checkpoint download, with these commands we can output everything (a resulting image and a json file) to a preds directory: 12mkdir predslumi predict image.jpg -f preds/objects.json -d preds/ Exploring the Pre-trained CheckpointsFirst, run the lumi checkpoint refresh command, so Luminoth knows about the checkpoints that it has available for download. After refreshing the local index, you can list the available checkpoints running lumi checkpoint list: 123456================================================================================| id | name | alias | source | status |================================================================================| e1c2565b51e9 | Faster R-CNN w/COCO | accurate | remote | DOWNLOADED || aad6912e94d9 | SSD w/Pascal VOC | fast | remote | NOT_DOWNLOADED |================================================================================ Here, you can see the “accurate” checkpoint and another “fast” checkpoint that is the SSD model trained with Pascal VOC dataset. Let’s get some information about the “accurate” checkpoint by the following command: 1lumi checkpoint info e1c2565b51e9 or 1lumi checkpoint info accurate If getting predictions for an image or video using a specific checkpoint (e.g., fast) you can do so by using the –checkpoint parameter: 1lumi predict img.jpg --checkpoint fast -f preds/objects.json -d preds/ Playing Around with the Built-in InterfaceLuminoth includes a simple web frontend so you can play around with detected objects in images using different thresholds. To launch this, simply type lumi server web and then open your browser at http://localhost:5000. If you are running on an external VM, you can do lumi server web –host 0.0.0.0 –port to open in a custom port. Building Custom datasetIn order to use a custom dataset, we must first transform whatever format your data is in, to TFRecords files (one for each split — train, val, test). Luminoth reads datasets natively only in TensorFlow’s TFRecords format. This is a binary format that will let Luminoth consume the data very efficiently. Fortunately, Luminoth provides several CLI tools for transforming popular dataset format (such as Pascal VOC, ImageNet, COCO, CSV, etc.) into TFRecords. We should start by downloading the annotation files (this and this, for train) and the class description file. After we get the class-descriptions-boxable.csv file, we can go over all the classes available in the OpenImages dataset and see which ones are related to traffic dataset. The following were hand-picked after examining the full file: 12345678/m/015qff,Traffic light/m/0199g,Bicycle/m/01bjv,Bus/m/01g317,Person/m/04_sv,Motorcycle/m/07r04,Truck/m/0h2r6,Van/m/0k4j,Car Luminoth includes a dataset reader that can take OpenImages format, the dataset reader expects a particular directory layout so it knows where the files are located. In this case, files corresponding to the examples must be in a folder named like their split (train, test, …). So, you should have the following: 12345.├── class-descriptions-boxable.csv└── train ├── train-annotations-bbox.csv └── train-annotations-human-imagelabels-boxable.csv Then run the following command: 1234567lumi dataset transform \\ --type openimages \\ --data-dir . \\ --output-dir ./out \\ --split train \\ --class-examples 100 \\ --only-classes=/m/015qff,/m/0199g,/m/01bjv,/m/01g317,/m/04_sv,/m/07r04,/m/0h2r6,/m/0k4j This will generate TFRecord file for the train split: 12345678910INFO:tensorflow:Saved 360 records to \"./out/train.tfrecords\"INFO:tensorflow:Composition per class (train):INFO:tensorflow: Person (/m/01g317): 380INFO:tensorflow: Car (/m/0k4j): 255INFO:tensorflow: Bicycle (/m/0199g): 126INFO:tensorflow: Bus (/m/01bjv): 106INFO:tensorflow: Traffic light (/m/015qff): 105INFO:tensorflow: Truck (/m/07r04): 101INFO:tensorflow: Van (/m/0h2r6): 100INFO:tensorflow: Motorcycle (/m/04_sv): 100 Training the ModelTraining orchestration, including the model to be used, the dataset location and training schedule, is specified in a YAML config file. This file will be consumed by Luminoth and merged to the default configuration, to start the training session. You can see a minimal config file example in sample_config.yml. This file illustrates the entries you’ll most probably need to modify, which are: 1) train.run_name: the run name for the training session, used to identify it.2) train.job_dir: directory in which both model checkpoints and summaries (for TensorBoard consumption) will be saved. The actual files will be stored under /.3) dataset.dir: directory from which to read the TFRecord files.4) model.type: model to use for object detection (fasterrcnn, or ssd).5) network.num_classes: number of classes to predict (depends on your dataset). For looking at all the possible configuration options, mostly related to the model itself, you can check the base_config.yml file. Building the config file for the datasetProbably the most important setting for training is the learning rate. You will most likely want to tune this depending on your dataset, and you can do it via the train.learning_rate setting in the configuration. For example, this would be a good setting for training on the full COCO dataset: 1234learning_rate: decay_method: piecewise_constant boundaries: [250000, 450000, 600000] values: [0.0003, 0.0001, 0.00003, 0.00001] To get to this, you will need to run some experiments and see what works best. 12345678910111213141516171819train: # Run name for the training session. run_name: traffic job_dir: &lt;change this directory&gt; learning_rate: decay_method: piecewise_constant # Custom dataset for Luminoth Tutorial boundaries: [90000, 160000, 250000] values: [0.0003, 0.0001, 0.00003, 0.00001]dataset: type: object_detection dir: &lt;directory with your dataset&gt;model: type: fasterrcnn network: num_classes: 8 anchors: # Add one more scale to be better at detecting small objects scales: [0.125, 0.25, 0.5, 1, 2] Running the trainingAssuming you already have both your dataset (TFRecords) and the config file ready, you can start your training session by running the command as follows: 1lumi train -c config.yml You can use the -o option to override any configuration option using dot notation (e.g. -o model.rpn.proposals.nms_threshold=0.8). If you are using a CUDA-based GPU, you can select the GPU to use by setting the CUDA_VISIBLE_DEVICES environment variable. Storing checkpoints (partial weights)As the training progresses, Luminoth will periodically save a checkpoint with the current weights of the model. The files will be output in your / folder. By default, they will be saved every 600 seconds of training, but you can configure this with the train.save_checkpoint_secs setting in your config file. The default is to only store the latest checkpoint (that is, when a checkpoint is generated, the previous checkpoint gets deleted) in order to conserve storage. Evaluating ModelsGenerally, datasets (like OpenImages, which we just used) provide “splits”. The “train” split is the largest, and the one from which the model actually does the learning. Then, you have the “validation” (or “val”) split, which consists of different images, in which you can draw metrics of your model’s performance, in order to better tune your hyperparameters. Finally, a “test” split is provided in order to conduct the final evaluation of how your model would perform in the real world once it is trained. Building a validation datasetLet’s start by building TFRecords from the validation split of OpenImages. For this, we can download the files with the annotations and use the same lumi dataset transform that we used to build our training data. In your dataset folder (where the class-descriptions-boxable.csv is located), run the following commands: 123mkdir validationwget -P validation https://storage.googleapis.com/openimages/2018_04/validation/validation-annotations-bbox.csvwget -P validation https://storage.googleapis.com/openimages/2018_04/validation/validation-annotations-human-imagelabels-boxable.csv After the downloads finish, we can build the TFRecords with the following: 1234567lumi dataset transform \\ --type openimages \\ --data-dir . \\ --output-dir ./out \\ --split validation \\ --class-examples 100 \\ --only-classes=/m/015qff,/m/0199g,/m/01bjv,/m/01g317,/m/04_sv,/m/07r04,/m/0h2r6,/m/0k4j The lumi eval commandIn Luminoth, lumi eval will make a run through your chosen dataset split (ie. validation or test), and run the model through every image, and then compute metrics like loss and mAP. If you are lucky and happen to have more than one GPU in your machine, it is advisable to run both train and eval at the same time. Start by running the evaluation: 1lumi eval --split validation -c custom.yml The mAP metricsMean Average Precision (mAP) is the metric commonly used to evaluate object detection task. It computes how well your classifier works across all classes, mAP will be a number between 0 and 1, and the higher the better. Moreover, it can be calculated across different IoU (Intersection over Union) thresholds. For example, Pascal VOC challenge metric uses 0.5 as threshold (notation mAP@0.5), and COCO dataset uses mAP at different thresholds and averages them all out (notation mAP@[0.5:0.95]). Luminoth will print out several of these metrics, specifying the thresholds that were used under this notation. Using TensorBoard for VisualizingTensorBoard is a very good tool for this, allowing you to see plenty of plots with the training related metrics. By default, Luminoth writes TensorBoard summaries during training, so you can leverage this tool without any effort: 1tensorboard --logdir &lt;job_dir&gt;/&lt;run_name&gt; If you are running from an external VM, make sure to use --host 0.0.0.0 and --port if you need other one than the default 6006. What to look forFirst, go to the “Scalars” tab. You are going to see several tags. validation_lossesHere, you will get the same loss values that Luminoth computes for the train, but for the chosen dataset split (validation, in this case). As in the case of train, you should mostly look at validation_losses/no_reg_loss. These will be the mAP metrics that will help you judge how well your model perform: The mAP values refer to the entire dataset split, so it will not jump around as much as other metrics. Manually inspecting with lumi server webYou can also use lumi server web command that we have seen before and try your partially trained model in a bunch of novel images. For this, you can launch it with a config file like: 1lumi server web -c config.yml Here you can also use –host and –port options. Creating and Sharing Your Own CheckpointsCreating a checkpointWe can create checkpoints and set some metadata like name, alias, etc. This time, we are going to create the checkpoint for our traffic model: 1234lumi checkpoint create \\ config.yml \\ -e name=\"OpenImages Traffic\" \\ -e alias=traffic You can verify that you do indeed have the checkpoint when running lumi checkpoint list, which should get you an output similar to this: 1234567================================================================================| id | name | alias | source | status |================================================================================| e1c2565b51e9 | Faster R-CNN w/COCO | accurate | remote | DOWNLOADED || aad6912e94d9 | SSD w/Pascal VOC | fast | remote | DOWNLOADED || cb0e5d92a854 | OpenImages Traffic | traffic | local | LOCAL |================================================================================ Moreover, if you inspect the ~/.luminoth/checkpoints/ folder, you will see that now you have a folder that corresponds to your newly created checkpoint. Inside this folder are the actual weights of the model, plus some metadata and the configuration file that was used during training. Sharing checkpointsSimply run lumi checkpoint export cb0e5d92a854. You will get a file named cb0e5d92a854.tar in your current directory, which you can easily share to somebody else. By running lumi checkpoint import cb0e5d92a854.tar, the checkpoint will be listed locally. Using Luminoth with PythonCalling Luminoth from your Python app is very straightforward. 123456789101112131415from luminoth import Detector, read_image, vis_objectsimage = read_image('traffic-image.png')# If no checkpoint specified, will assume `accurate` by default. In this case,# we want to use our traffic checkpoint. The Detector can also take a config# object.detector = Detector(checkpoint='traffic')# Returns a dictionary with the detections.objects = detector.predict(image)print(objects)vis_objects(image, objects).save('traffic-out.png') The EndHope you enjoyed the simple tutorial! :)","categories":[{"name":"CV","slug":"CV","permalink":"https://steven-cheng-com.github.io/categories/CV/"}],"tags":[{"name":"Computer Vision","slug":"Computer-Vision","permalink":"https://steven-cheng-com.github.io/tags/Computer-Vision/"},{"name":"Object Detection","slug":"Object-Detection","permalink":"https://steven-cheng-com.github.io/tags/Object-Detection/"}],"author":"Steven Cheng"},{"title":"Usage of PyTessBaseAPI in Tesserocr","slug":"Usage-of-PyTessBaseAPI-in-Tesserocr","date":"2020-01-18T07:16:21.000Z","updated":"2020-04-09T07:00:06.251Z","comments":true,"path":"2020/01/18/Usage-of-PyTessBaseAPI-in-Tesserocr/","link":"","permalink":"https://steven-cheng-com.github.io/2020/01/18/Usage-of-PyTessBaseAPI-in-Tesserocr/","excerpt":"","text":"&nbsp; Steven Cheng Intro Tesseroct is a simple, Pillow-friendly, wrapper around the tesseract-ocr API for Optical Character Recognition (OCR), it integrates directly with Tesseract’s C++ API using Cython which allows for a simple Pythonic and easy-to-read source code. It enables real concurrent execution when used with Python’s threading module by releasing the GIL while processing an image in tesseract. Installation Linux and BSD/MacOS 1$ pip install tesserocr Windows The proposed downloads consist of stand-alone packages containing all the Windows libraries needed for execution. The recommended method of installation is via Conda as described below. 1) Conda 1&gt; conda install -c conda-forge tesserocr 2) pipDownload the wheel file corresponding to your Windows platform and Python installation from tesserocr-windows_build and install them via: 1&gt; pip install &lt;package_name&gt;.whl Usage Initialize and re-use the tesseract API instance to score multiple images: 1234567891011from tesserocr import PyTessBaseAPIimages = ['sample.jpg', 'sample2.jpg', 'sample3.jpg']with PyTessBaseAPI() as api: for img in images: api.SetImageFile(img) print(api.GetUTF8Text()) print(api.AllWordConfidences())# api is automatically finalized when used in a with-statement (context manager).# otherwise api.End() should be explicitly called when it's no longer needed. Advanced API Examples 1) GetComponentImages example: 12345678910111213141516from PIL import Imagefrom tesserocr import PyTessBaseAPI, RILimage = Image.open('/usr/src/tesseract/testing/phototest.tif')with PyTessBaseAPI() as api: api.SetImage(image) boxes = api.GetComponentImages(RIL.TEXTLINE, True) print('Found &#123;&#125; textline image components.'.format(len(boxes))) for i, (im, box, _, _) in enumerate(boxes): # im is a PIL image object # box is a dict with x, y, w and h keys api.SetRectangle(box['x'], box['y'], box['w'], box['h']) ocrResult = api.GetUTF8Text() conf = api.MeanTextConf() print(u\"Box[&#123;0&#125;]: x=&#123;x&#125;, y=&#123;y&#125;, w=&#123;w&#125;, h=&#123;h&#125;, \" \"confidence: &#123;1&#125;, text: &#123;2&#125;\".format(i, conf, ocrResult, **box)) 2) Orientation and script detection (OSD): 1234567891011121314from PIL import Imagefrom tesserocr import PyTessBaseAPI, PSMwith PyTessBaseAPI(psm=PSM.AUTO_OSD) as api: image = Image.open(\"/usr/src/tesseract/testing/eurotext.tif\") api.SetImage(image) api.Recognize() it = api.AnalyseLayout() orientation, direction, order, deskew_angle = it.Orientation() print(\"Orientation: &#123;:d&#125;\".format(orientation)) print(\"WritingDirection: &#123;:d&#125;\".format(direction)) print(\"TextlineOrder: &#123;:d&#125;\".format(order)) print(\"Deskew angle: &#123;:.4f&#125;\".format(deskew_angle)) or simply with OSD_ONLY page segmentation mode: 12345678from tesserocr import PyTessBaseAPI, PSMwith PyTessBaseAPI(psm=PSM.OSD_ONLY) as api: api.SetImageFile(\"/usr/src/tesseract/testing/eurotext.tif\") os = api.DetectOS() print(\"Orientation: &#123;orientation&#125;\\nOrientation confidence: &#123;oconfidence&#125;\\n\" \"Script: &#123;script&#125;\\nScript confidence: &#123;sconfidence&#125;\".format(**os)) more human-readable info with tesseract 4+ (with LSTM engine): 12345678from tesserocr import PyTessBaseAPI, PSM, OEMwith PyTessBaseAPI(psm=PSM.OSD_ONLY, oem=OEM.LSTM_ONLY) as api: api.SetImageFile(\"/usr/src/tesseract/testing/eurotext.tif\") os = api.DetectOrientationScript() print(\"Orientation: &#123;orient_deg&#125;\\nOrientation confidence: &#123;orient_conf&#125;\\n\" \"Script: &#123;script_name&#125;\\nScript confidence: &#123;script_conf&#125;\".format(**os)) 3） Iterator over the classifier choices for a single symbol: 123456789101112131415161718192021222324252627from __future__ import print_functionfrom tesserocr import PyTessBaseAPI, RIL, iterate_levelwith PyTessBaseAPI() as api: api.SetImageFile('/usr/src/tesseract/testing/phototest.tif') api.SetVariable(\"save_blob_choices\", \"T\") api.SetRectangle(37, 228, 548, 31) api.Recognize() ri = api.GetIterator() level = RIL.SYMBOL for r in iterate_level(ri, level): symbol = r.GetUTF8Text(level) # r == ri conf = r.Confidence(level) if symbol: print(u'symbol &#123;&#125;, conf: &#123;&#125;'.format(symbol, conf), end='') indent = False ci = r.GetChoiceIterator() for c in ci: if indent: print('\\t\\t ', end='') print('\\t- ', end='') choice = c.GetUTF8Text() # c == ci print(u'&#123;&#125; conf: &#123;&#125;'.format(choice, c.Confidence())) indent = True print('----------')","categories":[{"name":"CV","slug":"CV","permalink":"https://steven-cheng-com.github.io/categories/CV/"}],"tags":[{"name":"OCR","slug":"OCR","permalink":"https://steven-cheng-com.github.io/tags/OCR/"},{"name":"Computer Vision","slug":"Computer-Vision","permalink":"https://steven-cheng-com.github.io/tags/Computer-Vision/"}],"author":"Stephen Cheng"},{"title":"PyCharm Keyboard Shortcuts","slug":"PyCharm-keyboard-shortcuts","date":"2019-12-19T14:17:38.000Z","updated":"2020-04-08T09:12:54.886Z","comments":true,"path":"2019/12/19/PyCharm-keyboard-shortcuts/","link":"","permalink":"https://steven-cheng-com.github.io/2019/12/19/PyCharm-keyboard-shortcuts/","excerpt":"","text":"&nbsp; Steven Cheng Intro PyCharm is an integrated development environment for computer programming, specifically for the Python language. It is developed by the Czech company JetBrains on February 3, 2010. Part one Part two Part three","categories":[{"name":"Programming","slug":"Programming","permalink":"https://steven-cheng-com.github.io/categories/Programming/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://steven-cheng-com.github.io/tags/Python/"},{"name":"PyCharm","slug":"PyCharm","permalink":"https://steven-cheng-com.github.io/tags/PyCharm/"},{"name":"Shortcuts","slug":"Shortcuts","permalink":"https://steven-cheng-com.github.io/tags/Shortcuts/"}],"author":"Stephen Cheng"},{"title":"Keras for Data Science","slug":"Keras-for-Data-Science","date":"2019-09-21T13:36:52.000Z","updated":"2020-04-08T09:12:40.132Z","comments":true,"path":"2019/09/21/Keras-for-Data-Science/","link":"","permalink":"https://steven-cheng-com.github.io/2019/09/21/Keras-for-Data-Science/","excerpt":"","text":"&nbsp; Steven Cheng Intro Keras is a powerful and easy-to-use deep learning library for Theano and TensorFlow that provides a high-level neural networks API to develop and evaluate deep learning models. A Basic Example:123456789101112131415&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; from keras.models import Sequential&gt;&gt;&gt; from keras.layers import Dense&gt;&gt;&gt; data = np.random.random((1000,100))&gt;&gt;&gt; labels = np.random.randint(2,size=(1000,1))&gt;&gt;&gt; model = Sequential()&gt;&gt;&gt; model.add(Dense(32, activation='relu', input_dim=100))&gt;&gt;&gt; model.add(Dense(1, activation='sigmoid'))&gt;&gt;&gt; model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])&gt;&gt;&gt; model.fit(data,labels,epochs=10,batch_size=32)&gt;&gt;&gt; predictions = model.predict(data) DataYour data needs to be stored as NumPy arrays or as a list of NumPy arrays. Ideally, you split the data in training and test sets, for which you can also resort to the train_test_split module of sklearn.cross_validation. Keras Data Sets:123456789&gt;&gt;&gt; from keras.datasets import boston_housing, mnist, cifar10, imdb&gt;&gt;&gt; (x_train,y_train),(x_test,y_test) = mnist.load_data()&gt;&gt;&gt; (x_train2,y_train2),(x_test2,y_test2) = boston_housing.load_data()&gt;&gt;&gt; (x_train3,y_train3),(x_test3,y_test3) = cifar10.load_data()&gt;&gt;&gt; (x_train4,y_train4),(x_test4,y_test4) = imdb.load_data(num_words=20000)&gt;&gt;&gt; num_classes = 10 Other:1234&gt;&gt;&gt; from urllib.request import urlopen&gt;&gt;&gt; data = np.loadtxt(urlopen(\"http://archive.ics.uci.edu/ml/machine-learning-databases/pima-indians-diabetes/pima-indians-diabetes.data\"),delimiter=\",\")&gt;&gt;&gt; X = data[:,0:8]&gt;&gt;&gt; y = data [:,8] PreprocessingSequence Padding:123&gt;&gt;&gt; from keras.preprocessing import sequence&gt;&gt;&gt; x_train4 = sequence.pad_sequences(x_train4,maxlen=80)&gt;&gt;&gt; x_test4 = sequence.pad_sequences(x_test4,maxlen=80) One-Hot Encoding:12345&gt;&gt;&gt; from keras.utils import to_categorical&gt;&gt;&gt; Y_train = to_categorical(y_train, num_classes)&gt;&gt;&gt; Y_test = to_categorical(y_test, num_classes)&gt;&gt;&gt; Y_train3 = to_categorical(y_train3, num_classes)&gt;&gt;&gt; Y_test3 = to_categorical(y_test3, num_classes) Train and Test Sets:12&gt;&gt;&gt; from sklearn.model_selection import train_test_split&gt;&gt;&gt; X_train5,X_test5,y_train5,y_test5 = train_test_split(X, y, test_size=0.33, random_state=42) Standardization/Normalization:1234&gt;&gt;&gt; from sklearn.preprocessing import StandardScaler&gt;&gt;&gt; scaler = StandardScaler().fit(x_train2)&gt;&gt;&gt; standardized_X = scaler.transform(x_train2)&gt;&gt;&gt; standardized_X_test = scaler.transform(x_test2) Model ArchitectureSequential Model:1234&gt;&gt;&gt; from keras.models import Sequential&gt;&gt;&gt; model = Sequential()&gt;&gt;&gt; model2 = Sequential()&gt;&gt;&gt; model3 = Sequential() Multilayer Perceptron (MLP):Binary Classification 1234567&gt;&gt;&gt; from keras.layers import Dense&gt;&gt;&gt; model.add(Dense(12, input_dim=8, kernel_initializer='uniform', activation='relu'))&gt;&gt;&gt; model.add(Dense(8,kernel_initializer='uniform',activation='relu'))&gt;&gt;&gt; model.add(Dense(1,kernel_initializer='uniform',activation='sigmoid')) Multi-Class Classification 123456&gt;&gt;&gt; from keras.layers import Dropout&gt;&gt;&gt; model.add(Dense(512,activation='relu',input_shape=(784,)))&gt;&gt;&gt; model.add(Dropout(0.2))&gt;&gt;&gt; model.add(Dense(512,activation='relu'))&gt;&gt;&gt; model.add(Dropout(0.2))&gt;&gt;&gt; model.add(Dense(10,activation='softmax')) Regression 12&gt;&gt;&gt; model.add(Dense(64,activation='relu',input_dim=train_data.shape[1]))&gt;&gt;&gt; model.add(Dense(1)) Convolutional Neural Network (CNN):12345678910111213141516171819&gt;&gt;&gt; from keras.layers import Activation,Conv2D,MaxPooling2D,Flatten&gt;&gt;&gt; model2.add(Conv2D(32,(3,3),padding='same',input_shape=x_train.shape[1:]))&gt;&gt;&gt; model2.add(Activation('relu'))&gt;&gt;&gt; model2.add(Conv2D(32,(3,3)))&gt;&gt;&gt; model2.add(Activation('relu'))&gt;&gt;&gt; model2.add(MaxPooling2D(pool_size=(2,2)))&gt;&gt;&gt; model2.add(Dropout(0.25))&gt;&gt;&gt; model2.add(Conv2D(64,(3,3), padding='same'))&gt;&gt;&gt; model2.add(Activation('relu'))&gt;&gt;&gt; model2.add(Conv2D(64,(3, 3)))&gt;&gt;&gt; model2.add(Activation('relu'))&gt;&gt;&gt; model2.add(MaxPooling2D(pool_size=(2,2)))&gt;&gt;&gt; model2.add(Dropout(0.25))&gt;&gt;&gt; model2.add(Flatten())&gt;&gt;&gt; model2.add(Dense(512))&gt;&gt;&gt; model2.add(Activation('relu'))&gt;&gt;&gt; model2.add(Dropout(0.5))&gt;&gt;&gt; model2.add(Dense(num_classes))&gt;&gt;&gt; model2.add(Activation('softmax')) Recurrent Neural Network (RNN):1234&gt;&gt;&gt; from keras.klayers import Embedding,LSTM&gt;&gt;&gt; model3.add(Embedding(20000,128))&gt;&gt;&gt; model3.add(LSTM(128,dropout=0.2,recurrent_dropout=0.2))&gt;&gt;&gt; model3.add(Dense(1,activation='sigmoid')) Inspect Model12345678# Model output shape&gt;&gt;&gt; model.output_shape# Model summary representation&gt;&gt;&gt; model.summary()# Model configuration&gt;&gt;&gt; model.get_config()# List all weight tensors in the model&gt;&gt;&gt; model.get_weights() Compile ModelMLP: Binary Classification 123&gt;&gt;&gt; model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) MLP: Multi-Class Classification 123&gt;&gt;&gt; model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy']) MLP: Regression 1&gt;&gt;&gt; model.compile(optimizer='rmsprop', loss='mse', metrics=['mae']) Recurrent Neural Network 123&gt;&gt;&gt; model3.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) Model Training123456&gt;&gt;&gt; model3.fit(x_train4, y_train4, batch_size=32, epochs=15, verbose=1, validation_data=(x_test4,y_test4)) Evaluate Your Model’s Performance123&gt;&gt;&gt; score = model3.evaluate(x_test, y_test, batch_size=32) Prediction12&gt;&gt;&gt; model3.predict(x_test4, batch_size=32)&gt;&gt;&gt; model3.predict_classes(x_test4,batch_size=32) Save/ Reload Models123&gt;&gt;&gt; from keras.models import load_model&gt;&gt;&gt; model3.save('model_file.h5')&gt;&gt;&gt; my_model = load_model('my_model.h5') Model Fine-tuningOptimization Parameters:1234&gt;&gt;&gt; from keras.optimizers import RMSprop&gt;&gt;&gt; opt = RMSprop(lr=0.0001, decay=1e-6)&gt;&gt;&gt; model2.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy']) Early Stopping:12345678&gt;&gt;&gt; from keras.callbacks import EarlyStopping&gt;&gt;&gt; early_stopping_monitor = EarlyStopping(patience=2)&gt;&gt;&gt; model3.fit(x_train4, y_train4, batch_size=32, epochs=15, validation_data=(x_test4,y_test4), callbacks=[early_stopping_monitor])","categories":[{"name":"DL","slug":"DL","permalink":"https://steven-cheng-com.github.io/categories/DL/"}],"tags":[{"name":"Keras","slug":"Keras","permalink":"https://steven-cheng-com.github.io/tags/Keras/"},{"name":"Data Science","slug":"Data-Science","permalink":"https://steven-cheng-com.github.io/tags/Data-Science/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://steven-cheng-com.github.io/tags/Deep-Learning/"}],"author":"Stephen Cheng"},{"title":"Python for Data Science Cheat Sheet with Scikit-Learn","slug":"Python-for-Data-Science-Cheat-Sheet-with-Scikit-Learn","date":"2019-06-18T08:33:19.000Z","updated":"2020-04-08T09:13:43.096Z","comments":true,"path":"2019/06/18/Python-for-Data-Science-Cheat-Sheet-with-Scikit-Learn/","link":"","permalink":"https://steven-cheng-com.github.io/2019/06/18/Python-for-Data-Science-Cheat-Sheet-with-Scikit-Learn/","excerpt":"","text":"&nbsp; Steven Cheng Intro of Scikit-LearnScikit-learn is an open source Python library that implements a range of machine learning, data preprocessing, cross-validation and visualization algorithms using a unified interface. The whole workflow of data science includes: Loading the data Training and test data Preprocessing ehe data Create your model Model fitting Prediction Evaluate your model’a performance Tune your model Here I give you a basic example for reference. 12345678910111213&gt;&gt;&gt; from sklearn import neighbors, datasets, preprocessing&gt;&gt;&gt; from sklearn.model_selection import train_test_split&gt;&gt;&gt; from sklearn.metrics import accuracy_score&gt;&gt;&gt; iris = datasets.load_iris()&gt;&gt;&gt; X, y = iris.data[:, :2], iris.target&gt;&gt;&gt; X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=33)&gt;&gt;&gt; scaler = preprocessing.StandardScaler().fit(X_train)&gt;&gt;&gt; X_train = scaler.transform(X_train)&gt;&gt;&gt; X_test = scaler.transform(X_test)&gt;&gt;&gt; knn = neighbors.KNeighborsClassifier(n_neighbors=5)&gt;&gt;&gt; knn.fit(X_train, y_train)&gt;&gt;&gt; y_pred = knn.predict(X_test)&gt;&gt;&gt; accuracy_score(y_test, y_pred) Loading The DataYour data needs to be numeric and stored as NumPy arrays or SciPy sparse matrices. Other types that are convertible to numeric arrays, such as Pandas DataFrame, are also acceptable. 1234&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; X = np.random.random((10,5))&gt;&gt;&gt; y = np.array(['M','M','F','F','M','F','M','M','F','F','F'])&gt;&gt;&gt; X[X &lt; 0.7] = 0 Training And Test Data12&gt;&gt;&gt; from sklearn.model_selection import train_test_split&gt;&gt;&gt; X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0) Preprocessing The DataImputing Missing Values123&gt;&gt;&gt; from sklearn.preprocessing import Imputer&gt;&gt;&gt; imp = Imputer(missing_values=0, strategy='mean', axis=0)&gt;&gt;&gt; imp.fit_transform(X_train) Standardization1234&gt;&gt;&gt; from sklearn.preprocessing import StandardScaler&gt;&gt;&gt; scaler = StandardScaler().fit(X_train)&gt;&gt;&gt; standardized_X = scaler.transform(X_train)&gt;&gt;&gt; standardized_X_test = scaler.transform(X_test) Normalization1234&gt;&gt;&gt; from sklearn.preprocessing import Normalizer&gt;&gt;&gt; scaler = Normalizer().fit(X_train)&gt;&gt;&gt; normalized_X = scaler.transform(X_train)&gt;&gt;&gt; normalized_X_test = scaler.transform(X_test) Binarization123&gt;&gt;&gt; from sklearn.preprocessing import Binarizer&gt;&gt;&gt; binarizer = Binarizer(threshold=0.0).fit(X)&gt;&gt;&gt; binary_X = binarizer.transform(X) Encoding Categorical Features123&gt;&gt;&gt; from sklearn.preprocessing import LabelEncoder&gt;&gt;&gt; enc = LabelEncoder()&gt;&gt;&gt; y = enc.fit_transform(y) Generating Polynomial Features123&gt;&gt;&gt; from sklearn.preprocessing import PolynomialFeatures&gt;&gt;&gt; poly = PolynomialFeatures(5)&gt;&gt;&gt; poly.fit_transform(X) Create Your ModelSupervised Learning EstimatorsLinear Regression 12&gt;&gt;&gt; from sklearn.linear_model import LinearRegression&gt;&gt;&gt; lr = LinearRegression(normalize=True) Support Vector Machines (SVM) 12&gt;&gt;&gt; from sklearn.svm import SVC&gt;&gt;&gt; svc = SVC(kernel='linear') Naive Bayes 12&gt;&gt;&gt; from sklearn.naive_bayes import GaussianNB&gt;&gt;&gt; gnb = GaussianNB() KNN 12&gt;&gt;&gt; from sklearn import neighbors&gt;&gt;&gt; knn = neighbors.KNeighborsClassifier(n_neighbors=5) Unsupervised Learning EstimatorsPrincipal Component Analysis (PCA) 12&gt;&gt;&gt; from sklearn.decomposition import PCA&gt;&gt;&gt; pca = PCA(n_components=0.95) K Means 12&gt;&gt;&gt; from sklearn.cluster import KMeans&gt;&gt;&gt; k_means = KMeans(n_clusters=3, random_state=0) Model FittingSupervised learningFit the model to the data. 123&gt;&gt;&gt; lr.fit(X, y)&gt;&gt;&gt; knn.fit(X_train, y_train)&gt;&gt;&gt; svc.fit(X_train, y_train) Unsupervised LearningFit the model to the data.Fit to data, then transform it. 12&gt;&gt;&gt; k_means.fit(X_train)&gt;&gt;&gt; pca_model = pca.fit_transform(X_train) PredictionSupervised EstimatorsPredict labels. Predict labels. Estimate probability of a label. 123&gt;&gt;&gt; y_pred = svc.predict(np.random.random((2,5)))&gt;&gt;&gt; y_pred = lr.predict(X_test)&gt;&gt;&gt; y_pred = knn.predict_proba(X_test) Unsupervised EstimatorsPredict labels in clustering algos. 1&gt;&gt;&gt; y_pred = k_means.predict(X_test) Evaluate Your Model’s PerformanceClassification MetricsAccuracy Score Estimator score method. Metric scoring functions. 123&gt;&gt;&gt; knn.score(X_test, y_test)&gt;&gt;&gt; from sklearn.metrics import accuracy_score&gt;&gt;&gt; accuracy_score(y_test, y_pred) Classification Report Precision, recall, f1-score and support. 12&gt;&gt;&gt; from sklearn.metrics import classification_report&gt;&gt;&gt; print(classification_report(y_test, y_pred)) Confusion Matrix 12&gt;&gt;&gt; from sklearn.metrics import confusion_matrix&gt;&gt;&gt; print(confusion_matrix(y_test, y_pred)) Regression MetricsMean Absolute Error 123&gt;&gt;&gt; from sklearn.metrics import mean_absolute_error&gt;&gt;&gt; y_true = [3, -0.5, 2]&gt;&gt;&gt; mean_absolute_error(y_true, y_pred) Mean Squared Error 12&gt;&gt;&gt; from sklearn.metrics import mean_squared_error&gt;&gt;&gt; mean_squared_error(y_test, y_pred) R² Score 12&gt;&gt;&gt; from sklearn.metrics import r2_score&gt;&gt;&gt; r2_score(y_true, y_pred) Clustering MetricsAdjusted Rand Index 12&gt;&gt;&gt; from sklearn.metrics import adjusted_rand_score&gt;&gt;&gt; adjusted_rand_score(y_true, y_pred) Homogeneity 12&gt;&gt;&gt; from sklearn.metrics import homogeneity_score&gt;&gt;&gt; homogeneity_score(y_true, y_pred) V-measure 12&gt;&gt;&gt; from sklearn.metrics import v_measure_score&gt;&gt;&gt; metrics.v_measure_score(y_true, y_pred) Cross-Validation123&gt;&gt;&gt; from sklearn.cross_validation import cross_val_score&gt;&gt;&gt; print(cross_val_score(knn, X_train, y_train, cv=4))&gt;&gt;&gt; print(cross_val_score(lr, X, y, cv=2)) Tune Your ModelGrid Search123456&gt;&gt;&gt; from sklearn.grid_search import GridSearchCV&gt;&gt;&gt; params = &#123;\"n_neighbors\": np.arange(1,3), \"metric\": [\"euclidean\", \"cityblock\"]&#125;&gt;&gt;&gt; grid = GridSearchCV(estimator=knn, param_grid=params)&gt;&gt;&gt; grid.fit(X_train, y_train)&gt;&gt;&gt; print(grid.best_score_)&gt;&gt;&gt; print(grid.best_estimator_.n_neighbors) Randomized Parameter Optimization1234567&gt;&gt;&gt; from sklearn.grid_search import RandomizedSearchCV&gt;&gt;&gt; params = &#123;\"n_neighbors\": range(1,5), \"weights\": [\"uniform\", \"distance\"]&#125;&gt;&gt;&gt; rsearch = RandomizedSearchCV(estimator=knn, param_distributions=params, cv=4, n_iter=8,random_state=5)&gt;&gt;&gt; rsearch.fit(X_train, y_train)&gt;&gt;&gt; print(rsearch.best_score_)","categories":[{"name":"ML","slug":"ML","permalink":"https://steven-cheng-com.github.io/categories/ML/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://steven-cheng-com.github.io/tags/Python/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"https://steven-cheng-com.github.io/tags/Machine-Learning/"},{"name":"Data Science","slug":"Data-Science","permalink":"https://steven-cheng-com.github.io/tags/Data-Science/"},{"name":"Scikit-Learn","slug":"Scikit-Learn","permalink":"https://steven-cheng-com.github.io/tags/Scikit-Learn/"},{"name":"Sklearn","slug":"Sklearn","permalink":"https://steven-cheng-com.github.io/tags/Sklearn/"}],"author":"Steven Cheng"},{"title":"How to Install and Run MongoDB on Mac OS","slug":"Install-MongoDB-on-Mac","date":"2019-03-11T08:33:19.000Z","updated":"2020-04-08T09:12:35.940Z","comments":true,"path":"2019/03/11/Install-MongoDB-on-Mac/","link":"","permalink":"https://steven-cheng-com.github.io/2019/03/11/Install-MongoDB-on-Mac/","excerpt":"","text":"&nbsp; Steven Cheng Intro MongoDB is a document database which belongs to a family of databases called NoSQL - not only SQL. In MongoDB, records are documents which behave a lot like JSON objects in JavaScript. Values in documents can be looked up by their field’s key. Documents can have some fields/keys and not others, which makes Mongo extremely flexible. This is much different than SQL databases like MySQL, where fields correspond to columns in a table and individual records correspond to rows. Install and Run MongoDB with Homebrew Make sure Homebrew already installed on Mac (Homebrew is a package manager for the Mac – it makes installing most open source software). Open the Mac terminal application and type brew update, then type brew install mongodb After MongoDB is downloaded, create a directory to store MongoDB data files, type mkdir -p /data/db Make sure the directory has the right permissions: 12&gt; sudo chown -R `id -un` /data/db&gt; # Enter your psd Run the Mongo daemon by typing mongod in your terminal window. Run the Mongo shell by typing mongo in another terminal window. To exit the Mongo shell run quit(), to stop the Mongo daemon hit ctrl+c Install and Run MongoDB by Downloading it Manually 1) Go to the MongoDB website and download the correct version of MongoDB. 2) After downloading MongoDB, move the gzipped tar file to the folder where you want MongoDB installed by typing commands like these in your terminal: 12&gt; cd Downloads&gt; mv mongodb-macos-x86_64-4.2.2.tgz ~/ 3) Extract MongoDB from the downloaded archive and change the name of the directory to something more concise by following commands: 12&gt; cd ~/ &gt; tar -zxvf mongodb-macos-x86_64-4.2.2.tgz&gt; mv mongodb-macos-x86_64-4.2.2 mongodb 4) Create a directory to store MongoDB data files, type mkdir -p /data/db 5) Make sure the directory has the right permissions: 12&gt; sudo chown -R `id -un` /data/db&gt; # Enter your psd 6) If you can’t create /data/db directory, you can also use other directory to replace it by running command like this: 1~/mongodb/bin/mongod --dbpath ~/mongodb/data then jump to step 8. 7) Run the Mongo daemon by typing ~/mongodb/bin/mongod in your terminal window. 8) Run the Mongo shell by typing ~/mongodb/bin/mongo in another terminal window. 9) To exit the Mongo shell run quit(), to stop the Mongo daemon hit ctrl+c","categories":[{"name":"System","slug":"System","permalink":"https://steven-cheng-com.github.io/categories/System/"}],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"https://steven-cheng-com.github.io/tags/MongoDB/"}],"author":"Stephen Cheng"},{"title":"How to Transfer Files & Connect to Jupyter Notebook Between Azure Virtual Machines and Local Systems","slug":"HowtoTransferFiles","date":"2019-01-28T06:02:39.000Z","updated":"2020-04-08T09:12:31.499Z","comments":true,"path":"2019/01/28/HowtoTransferFiles/","link":"","permalink":"https://steven-cheng-com.github.io/2019/01/28/HowtoTransferFiles/","excerpt":"","text":"&nbsp; Steven Cheng IntroRecently, cloud platforms are popular among various companies and conferences. Virtual Machines are one of the main applications provided by cloud platforms. For instance, Microsoft Azure offers Data Science Virtual Machines. Even though we have cloud platforms do us a favour to process hundreds and thousands of data remotely, I do need to upload files or download results from remote server. So how to interact between remote cloud servers and local systems? We’ll take Azure Virtual Machines as a case study. Transfer Files Copy a Local File to a Azure Virtual Machine with the scp Command: 1scp /local/path/file.txt azure_username@azure_host_ip:/remote/directory If SSH on the remote host is listening on a port other than the default 22, then you can specify a port using the -P argument: 1scp -P 1234 /local/path/file.txt azure_username@azure_host_ip:/remote/directory To copy a directory from a local to remote system, we can use the -r option: 1scp -r /local/directory azure_username@azure_host_ip:/remote/directory Copy a Remote File to a Local System using the scp command: 1scp azure_username@azure_host_ip:/remote/file.txt /local/directory Copy a File Between Two Azure Virtual Machines using the scp Command: 1scp azure_username1@azure_host_ip1:/directory/file.txt azure_username2@azure_host_ip2:/directory Connect to Azure Virtual MachineHere, we can use SSH command to connect to the Azure Virtual Machine from local path. 1ssh azure_username@azure_host_ip Connect to Jupyter Notebook applicationHere, we use SSH command to connect to the Jupyter Notebook Application. First, install and start the Jupyter Notebook Application in the Azure Virtual Machines, then open the local terminal and input the following command: 1ssh -L 8000:localhost:8888 azure_username@azure_host_ip Next, entering to the Jupyter Notebook Application using local browser with the url ‘localhost:8000’, and input the Jupyter notebook token from Azure Virtual Machines.","categories":[{"name":"System","slug":"System","permalink":"https://steven-cheng-com.github.io/categories/System/"}],"tags":[{"name":"VM","slug":"VM","permalink":"https://steven-cheng-com.github.io/tags/VM/"},{"name":"Jupyter","slug":"Jupyter","permalink":"https://steven-cheng-com.github.io/tags/Jupyter/"},{"name":"Azure","slug":"Azure","permalink":"https://steven-cheng-com.github.io/tags/Azure/"}],"author":"Stephen Cheng"},{"title":"Awesome Programming Skills for Python User","slug":"AwesomeProgramminSkillsforPythonUser","date":"2018-12-24T10:22:38.000Z","updated":"2020-04-08T09:12:21.516Z","comments":true,"path":"2018/12/24/AwesomeProgramminSkillsforPythonUser/","link":"","permalink":"https://steven-cheng-com.github.io/2018/12/24/AwesomeProgramminSkillsforPythonUser/","excerpt":"","text":"&nbsp; Steven Cheng IntroHere are some awesome programming skills shared for Python users. Hopefully it’s useful to you. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126# most frequent element in a lista = [1,2,3,1,2,3,2,2,2,4,5,1]print(max(set(a), key = a.count))# use Counterfrom collections import Countercnt = Counter(a)print(cnt.most_common(3))# check two strings have same charactersfrom collections import Counterstr1 = \"I see him\"str2 = \"him I see\"print(Counter(str1) == Counter(str2))# reverse stringb = 'abcdefghijklmnopqrstuvwxyz'print(b[::-1])for char in reversed(b): print(char)num = 123456789print(int(str(num)[::-1]))# transpose 2d arrayoriginal = [['a','b'], ['1','2'],['A','B']]transposed = zip(*original)print(list(transposed))# call different functions with same argumentsdef product(a,b): return a*bdef add(a,b): return a+bx = Trueprint((product if x else add)(5,7))# a shallow copye = [1,2,3,4,5]d = ed[0] = 10print(d,e)d2 = e[:]d2[0] = 11print(d2,e)# deep copyfrom copy import deepcopyf = [[1,2],[3,4]]f2 = deepcopy(f)f[0] = ['x','y']print(f,f2)# sort a dict by its value with built-in sorted funcg = &#123;'apple':50, 'banana':25, 'orange': 20, 'watermelon':10&#125;print(sorted(g.items(), key = lambda x:x[1]))# use itemgetter instead of a lambdafrom operator import itemgetterprint(sorted(g.items(), key=itemgetter(1)))# sort dict by valueprint(sorted(g, key = g.get))# merge dictd1 = &#123;'x':1&#125;d2 = &#123;'y':2&#125;print(&#123;**d1, **d2&#125;) #python 3.5print(dict(d1.items() | d2.items())) #python 3.5d1.update(d2) #python 3.5 print(d1)# convert list to comma separated stringdata = [1,'re', 3, 'fa', 5]print(','.join(map(str, data)))# find index of min/max elementh = [40, 30, 20, 10, 50]def minIndex(lst): return min(range(len(lst)), key = lst.__getitem__)def maxIndex(lst): return max(range(len(lst)), key = lst.__getitem__)print(minIndex(h))print(maxIndex(h))# remove duplicate items from listi = [6,2,2,3,4,4,4,5]print(list(set(i)))from collections import OrderedDictprint(list(OrderedDict.fromkeys(i).keys()))","categories":[{"name":"Programming","slug":"Programming","permalink":"https://steven-cheng-com.github.io/categories/Programming/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://steven-cheng-com.github.io/tags/Python/"},{"name":"Code","slug":"Code","permalink":"https://steven-cheng-com.github.io/tags/Code/"},{"name":"Programming","slug":"Programming","permalink":"https://steven-cheng-com.github.io/tags/Programming/"}],"author":"Stephen Cheng"},{"title":"What Is Bagging and How Does It Work?","slug":"WhatIsBaggingandHowDoesItWork","date":"2018-11-21T05:42:41.000Z","updated":"2020-04-09T07:01:29.371Z","comments":true,"path":"2018/11/21/WhatIsBaggingandHowDoesItWork/","link":"","permalink":"https://steven-cheng-com.github.io/2018/11/21/WhatIsBaggingandHowDoesItWork/","excerpt":"","text":"&nbsp; Steven Cheng IntroBagging is a technique used to reduce the variance of our predictions by combining the result of multiple classifiers modeled on different sub-samples of the same dataset. The following figure will make it clearer. StepsThe steps followed in bagging are: 1) Create Multiple DataSets Sampling is done with replacement on the original data and new datasets are formed. The new data sets can have a fraction of the columns as well as rows, which are generally hyper-parameters in a bagging model. Taking row and column fractions less than 1 helps in making robust models, less prone to overfitting. 2) Build Multiple Classifiers Classifiers are built on each data set. Generally the same classifier is modeled on each dataset and predictions are made. 3) Combine Classifiers The predictions of all the classifiers are combined using a mean, median or mode value depending on the problem at hand. The combined values are generally more robust than a single model. Note that, here the number of models built is not a hyper-parameters. Higher number of models are always better or may give similar performance than lower numbers. It can be theoretically shown that the variance of the combined predictions are reduced to 1/n (n: number of classifiers) of the original variance, under some assumptions.","categories":[{"name":"ML","slug":"ML","permalink":"https://steven-cheng-com.github.io/categories/ML/"}],"tags":[{"name":"Bagging","slug":"Bagging","permalink":"https://steven-cheng-com.github.io/tags/Bagging/"},{"name":"Classifier","slug":"Classifier","permalink":"https://steven-cheng-com.github.io/tags/Classifier/"}],"author":"Stephen Cheng"},{"title":"What Are Ensemble Methods in Tree Based Modelling?","slug":"WhatAreEnsembleMethodsinTreeBasedModelling","date":"2018-10-10T07:33:00.000Z","updated":"2020-04-08T09:13:53.519Z","comments":true,"path":"2018/10/10/WhatAreEnsembleMethodsinTreeBasedModelling/","link":"","permalink":"https://steven-cheng-com.github.io/2018/10/10/WhatAreEnsembleMethodsinTreeBasedModelling/","excerpt":"","text":"&nbsp; Steven Cheng IntroThe literary meaning of word ‘ensemble’ is group. Ensemble methods involve group of predictive models to achieve a better accuracy and model stability. Ensemble methods are known to impart supreme boost to tree based models. Bias &amp; VarianceLike every other model, a tree based model also suffers from the plague of bias and variance. Bias means, ‘how much on an average are the predicted values different from the actual value.’ Variance means, ‘how different will the predictions of the model be at the same point if different samples are taken from the same population’. You build a small tree and you will get a model with low variance and high bias. How do you manage to balance the trade off between bias and variance ? Normally, as you increase the complexity of your model, you will see a reduction in prediction error due to lower bias in the model. As you continue to make your model more complex, you end up over-fitting your model and your model will start suffering from high variance. A champion model should maintain a balance between these two types of errors. This is known as the trade-off management of bias-variance errors. Ensemble learning is one way to execute this trade off analysis. Some of the commonly used ensemble methods include: Bagging, Boosting and Stacking.","categories":[{"name":"ML","slug":"ML","permalink":"https://steven-cheng-com.github.io/categories/ML/"}],"tags":[{"name":"Ensemble","slug":"Ensemble","permalink":"https://steven-cheng-com.github.io/tags/Ensemble/"},{"name":"Bias","slug":"Bias","permalink":"https://steven-cheng-com.github.io/tags/Bias/"},{"name":"Variance","slug":"Variance","permalink":"https://steven-cheng-com.github.io/tags/Variance/"}],"author":"Stephen Cheng"},{"title":"Decision Trees Implementation in R and Python","slug":"DecisionTreesImplementationinRandPython","date":"2018-08-06T18:58:03.000Z","updated":"2020-04-08T09:12:25.765Z","comments":true,"path":"2018/08/07/DecisionTreesImplementationinRandPython/","link":"","permalink":"https://steven-cheng-com.github.io/2018/08/07/DecisionTreesImplementationinRandPython/","excerpt":"","text":"&nbsp; Steven Cheng IntroFor R users and Python users, decision tree is quite easy to implement. Let’s quickly look at the set of codes which can get you started with this algorithm. For ease of use, I’ve shared standard codes where you’ll need to replace your dataset name and variables to get started. RFor R users, there are multiple packages available to implement decision tree such as ctree, rpart, tree etc. 1234567891011121314&gt; library(rpart)&gt; x &lt;- cbind(x_train,y_train)# grow tree&gt; fit &lt;- rpart(y_train ~ ., data = x,method=\"class\")&gt; summary(fit)#Predict Output&gt; predicted= predict(fit,x_test)&gt; library(rpart)&gt; x &lt;- cbind(x_train,y_train)# grow tree&gt; fit &lt;- rpart(y_train ~ ., data = x,method=\"class\")&gt; summary(fit)#Predict Output&gt; predicted= predict(fit,x_test) In the code above: y_train – represents dependent variable. x_train – represents independent variable x – represents training data. PythonFor Python users, below is the code: 123456789101112#Import necessary libraries like pandas, numpy...from sklearn import tree#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset# Create tree object# for classification, here you can change the algorithm as gini or entropy (information gain) by default it is gini model = tree.DecisionTreeClassifier(criterion='gini')# model = tree.DecisionTreeRegressor() for regression# Train the model using the training sets and check scoremodel.fit(X, y)model.score(X, y)#Predict Outputpredicted= model.predict(x_test)","categories":[{"name":"ML","slug":"ML","permalink":"https://steven-cheng-com.github.io/categories/ML/"}],"tags":[{"name":"Tree","slug":"Tree","permalink":"https://steven-cheng-com.github.io/tags/Tree/"},{"name":"Python","slug":"Python","permalink":"https://steven-cheng-com.github.io/tags/Python/"},{"name":"R","slug":"R","permalink":"https://steven-cheng-com.github.io/tags/R/"}],"author":"Stephen Cheng"},{"title":"Are Tree Based Models Better than Linear Models?","slug":"AreTreeBasedModelsBetterThanLinearModels","date":"2018-07-27T04:44:50.000Z","updated":"2020-04-09T07:00:20.244Z","comments":true,"path":"2018/07/27/AreTreeBasedModelsBetterThanLinearModels/","link":"","permalink":"https://steven-cheng-com.github.io/2018/07/27/AreTreeBasedModelsBetterThanLinearModels/","excerpt":"","text":"&nbsp; Steven Cheng Intro“If I can use logistic regression for classification problems and linear regression for regression problems, why is there a need to use trees”? Many of us have this question. And, this is a valid one too. How to choose a proper algorithms?Actually, you can use any algorithm. It is dependent on the type of problem you are solving. Let’s look at some key factors which will help you to decide which algorithm to use: 1) If the relationship between dependent &amp; independent variable is well approximated by a linear model, linear regression will outperform tree based model. 2) If there is a high non-linearity &amp; complex relationship between dependent &amp; independent variables, a tree model will outperform a classical regression method. 3) If you need to build a model which is easy to explain to people, a decision tree model will always do better than a linear model. Decision tree models are even simpler to interpret than linear regression!","categories":[{"name":"ML","slug":"ML","permalink":"https://steven-cheng-com.github.io/categories/ML/"}],"tags":[{"name":"Tree","slug":"Tree","permalink":"https://steven-cheng-com.github.io/tags/Tree/"},{"name":"Linear","slug":"Linear","permalink":"https://steven-cheng-com.github.io/tags/Linear/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"https://steven-cheng-com.github.io/tags/Machine-Learning/"}],"author":"Stephen Cheng"},{"title":"What Are The Key Parameters of Tree Modelling and How to Avoid Over-fitting in Decision Trees?","slug":"WhatAreTheKeyParametersofTreeModellingandHowtoAvoidOver-fittinginDecisionTrees","date":"2018-06-06T02:37:33.000Z","updated":"2020-04-08T09:13:57.360Z","comments":true,"path":"2018/06/06/WhatAreTheKeyParametersofTreeModellingandHowtoAvoidOver-fittinginDecisionTrees/","link":"","permalink":"https://steven-cheng-com.github.io/2018/06/06/WhatAreTheKeyParametersofTreeModellingandHowtoAvoidOver-fittinginDecisionTrees/","excerpt":"","text":"&nbsp; Steven Cheng IntroOverfitting is one of the key challenges faced while modeling decision trees. If there is no limit set of a decision tree, it will give you 100% accuracy on training set because in the worse case it will end up making 1 leaf for each observation. Thus, preventing overfitting is pivotal while modeling a decision tree and it can be done in 2 ways: 1) Setting constraints on tree size.2) Tree pruning. Let’s discuss both of these briefly. Setting Constraints on Tree SizeThis can be done by using various parameters which are used to define a tree. First, let‘s look at the general structure of a decision tree. The parameters used for defining a tree are further explained below. The parameters described below are irrespective of tool. It is important to understand the role of parameters used in tree modeling. These parameters are available in R &amp; Python. Minimum samples for a node split 1) Defines the minimum number of samples (or observations) which are required in a node to be considered for splitting.2) Used to control over-fitting. Higher values prevent a model from learning relations which might be highly specific to the particular sample selected for a tree.3) Too high values can lead to under-fitting hence, it should be tuned using CV. Minimum samples for a terminal node (leaf) 1) Defines the minimum samples (or observations) required in a terminal node or leaf.2) Used to control over-fitting similar to min_samples_split.3) Generally lower values should be chosen for imbalanced class problems because the regions in which the minority class will be in majority will be very small. Maximum depth of tree (vertical depth) 1) The maximum depth of a tree.2) Used to control over-fitting as higher depth will allow model to learn relations very specific to a particular sample.3) Should be tuned using CV. Maximum number of terminal nodes 1) The maximum number of terminal nodes or leaves in a tree.2) Can be defined in place of max_depth. Since binary trees are created, a depth of ‘n’ would produce a maximum of 2^n leaves. Maximum features to consider for split 1) The number of features to consider while searching for a best split. These will be randomly selected.2) As a thumb-rule, square root of the total number of features works great but we should check up to 30-40% of the total number of features.3) Higher values can lead to over-fitting but depends on case to case. Tree PruningAs discussed earlier, the technique of setting constraint is a greedy-approach. In other words, it will check for the best split instantaneously and move forward until one of the specified stopping condition is reached. Let’s consider the following case when you’re driving. There are 2 lanes: 1) A lane with cars moving at 80km/h.2) A lane with trucks moving at 30km/h. At this instant, you are the yellow car and you have 2 choices: 1) Take a left and overtake the other 2 cars quickly.2) Keep moving in the present lane. Let’s analyze these choice. In the former choice, you’ll immediately overtake the car ahead and reach behind the truck and start moving at 30 km/h, looking for an opportunity to move back right. All cars originally behind you move ahead in the meanwhile. This would be the optimum choice if your objective is to maximize the distance covered in next say 10 seconds. In the later choice, you sale through at same speed, cross trucks and then overtake maybe depending on situation ahead. Greedy you! This is exactly the difference between normal decision tree &amp; pruning. A decision tree with constraints won’t see the truck ahead and adopt a greedy approach by taking a left. On the other hand if we use pruning, we in effect look at a few steps ahead and make a choice. How to prune? So we know pruning is better. But how to implement it in decision tree? The idea is simple. 1) We first make the decision tree to a large depth.2) Then we start at the bottom and start removing leaves which are giving us negative returns when compared from the top.3) Suppose a split is giving us a gain of say -10 (loss of 10) and then the next split on that gives us a gain of 20. A simple decision tree will stop at step 1 but in pruning, we will see that the overall gain is +10 and keep both leaves. Note Note that sklearn’s decision tree classifier does not currently support pruning. Advanced packages like xgboost have adopted tree pruning in their implementation. But the library rpart in R, provides a function to prune. Good for R users!","categories":[{"name":"ML","slug":"ML","permalink":"https://steven-cheng-com.github.io/categories/ML/"}],"tags":[{"name":"Tree","slug":"Tree","permalink":"https://steven-cheng-com.github.io/tags/Tree/"},{"name":"Overfitting","slug":"Overfitting","permalink":"https://steven-cheng-com.github.io/tags/Overfitting/"}],"author":"Stephen Cheng"},{"title":"Merge Sort","slug":"MergeSort","date":"2018-05-18T16:23:47.000Z","updated":"2020-04-09T07:00:52.839Z","comments":true,"path":"2018/05/19/MergeSort/","link":"","permalink":"https://steven-cheng-com.github.io/2018/05/19/MergeSort/","excerpt":"","text":"&nbsp; Steven Cheng IntroIn computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Mergesort is a divide and conquer algorithm that was invented by John von Neumann in 1945. DefinitionConceptually, a merge sort works as follows: 1) Divide the unsorted list into n sublists, each containing 1 element (a list of 1 element is considered sorted). 2) Repeatedly merge sublists to produce new sorted sublists until there is only 1 sublist remaining. This will be the sorted list. DetailsClass: Sorting algorithmData structure: ArrayWorst-case performance: O(n log n)Best-case performance: O(n log n) typical, O(n) natural variantAverage performance: O(n log n)Worst-case space complexity:&lt;/1b&gt; О(n) total, O(n) auxiliary Figure above, first divide the list into the smallest unit (1 element), then compare each element with the adjacent list to sort and merge the two adjacent lists. Finally all the elements are sorted and merged. CodePython 123456789101112131415from collections import dequedef merge_sort(lst): if len(lst) &lt;= 1: return lst def merge(left, right): merged,left,right = deque(),deque(left),deque(right) while left and right: # deque popleft is also O(1) merged.append(left.popleft() if left[0] &lt;= right[0] else right.popleft()) merged.extend(right if right else left) return list(merged) middle = int(len(lst) // 2) left = merge_sort(lst[:middle]) right = merge_sort(lst[middle:]) return merge(left, right)","categories":[{"name":"Algo","slug":"Algo","permalink":"https://steven-cheng-com.github.io/categories/Algo/"}],"tags":[{"name":"Merge","slug":"Merge","permalink":"https://steven-cheng-com.github.io/tags/Merge/"},{"name":"Sort","slug":"Sort","permalink":"https://steven-cheng-com.github.io/tags/Sort/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://steven-cheng-com.github.io/tags/Algorithm/"}],"author":"Steven Cheng"},{"title":"Regression Trees vs. Classification Trees","slug":"RegressionTreesvs-ClassificationTrees","date":"2018-05-06T01:52:39.000Z","updated":"2020-04-09T07:01:10.266Z","comments":true,"path":"2018/05/06/RegressionTreesvs-ClassificationTrees/","link":"","permalink":"https://steven-cheng-com.github.io/2018/05/06/RegressionTreesvs-ClassificationTrees/","excerpt":"","text":"&nbsp; Steven Cheng IntroWe all know that the terminal nodes (or leaves) lies at the bottom of the decision tree. This means that decision trees are typically drawn upside down such that leaves are the bottom &amp; roots are the tops (shown below). Both the trees work almost similar to each other, let’s look at the primary differences &amp; similarity between classification and regression trees: 1) Regression trees are used when dependent variable is continuous. Classification trees are used when dependent variable is categorical. 2) In case of regression tree, the value obtained by terminal nodes in the training data is the mean response of observation falling in that region. Thus, if an unseen data observation falls in that region, we’ll make its prediction with mean value. 3) In case of classification tree, the value (class) obtained by terminal node in the training data is the mode of observations falling in that region. Thus, if an unseen data observation falls in that region, we’ll make its prediction with mode value. 4) Both the trees divide the predictor space (independent variables) into distinct and non-overlapping regions. For the sake of simplicity, you can think of these regions as high dimensional boxes or boxes. 5) Both the trees follow a top-down greedy approach known as recursive binary splitting. We call it as ‘top-down’ because it begins from the top of tree when all the observations are available in a single region and successively splits the predictor space into two new branches down the tree. It is known as ‘greedy’ because, the algorithm cares (looks for best variable available) about only the current split, and not about future splits which will lead to a better tree. 6) This splitting process is continued until a user defined stopping criteria is reached. For example: we can tell the algorithm to stop once the number of observations per node becomes less than 50. 7) In both the cases, the splitting process results in fully grown trees until the stopping criteria is reached. But, the fully grown tree is likely to overfit data, leading to poor accuracy on unseen data. This bring ‘pruning’. Pruning is one of the technique used tackle overfitting.","categories":[{"name":"ML","slug":"ML","permalink":"https://steven-cheng-com.github.io/categories/ML/"}],"tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"https://steven-cheng-com.github.io/tags/Machine-Learning/"},{"name":"Regression","slug":"Regression","permalink":"https://steven-cheng-com.github.io/tags/Regression/"},{"name":"Classification","slug":"Classification","permalink":"https://steven-cheng-com.github.io/tags/Classification/"}],"author":"Steven Cheng"},{"title":"Levenshtein Distance","slug":"LevenshteinDistance","date":"2018-04-18T10:09:03.000Z","updated":"2020-04-09T07:00:41.981Z","comments":true,"path":"2018/04/18/LevenshteinDistance/","link":"","permalink":"https://steven-cheng-com.github.io/2018/04/18/LevenshteinDistance/","excerpt":"","text":"&nbsp; Steven Cheng IntroLevenshtein distance is a string metric for measuring the difference between two sequences. Informally, the Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into the other. It is named after Vladimir Levenshtein, who considered this distance in 1965. Levenshtein distance may also be referred to as edit distance, although that term may also denote a larger family of distance metrics. DefinitionMathematically, the Levenshtein distance between two strings a,b (of length |a| and |b| respectively) is given by lev_a,b(|a|,|b|) where ExampleThe Levenshtein distance between “kitten” and “sitting” is 3, since the following three edits change one into the other, and there is no way to do it with fewer than three edits: 1) kitten → sitten (substitution of “s” for “k”)2) sitten → sittin (substitution of “i” for “e”)3) sittin → sitting (insertion of “g” at the end) CodePython 12345678910111213141516171819202122232425262728#-*- coding: utf-8 -*-\"\"\"Levenshtein distance for measuring string differenceCreated on Apr. 6th, 2017@author: Stephen\"\"\"import numpy as npclass levenshtein_distance: def le_dis(self, input_x, input_y): xlen = len(input_x) + 1 ylen = len(input_y) + 1 dp = np.zeros(shape=(xlen, ylen), dtype=int) for i in range(0, xlen): dp[i][0] = i for j in range(0, ylen): dp[0][j] = j for i in range(1, xlen): for j in range(1, ylen): if input_x[i - 1] == input_y[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) return dp[xlen - 1][ylen - 1]if __name__ == '__main__': ld = levenshtein_distance() print(ld.le_dis('abcd', 'abd')) # print out 1 print(ld.le_dis('ace', 'abcd')) # print out 2 print(ld.le_dis('hello world', 'hey word')) # print out 4","categories":[{"name":"Algo","slug":"Algo","permalink":"https://steven-cheng-com.github.io/categories/Algo/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://steven-cheng-com.github.io/tags/Algorithm/"},{"name":"Levenshtein","slug":"Levenshtein","permalink":"https://steven-cheng-com.github.io/tags/Levenshtein/"},{"name":"Distance","slug":"Distance","permalink":"https://steven-cheng-com.github.io/tags/Distance/"}],"author":"Stephen Cheng"},{"title":"What Is A Decision Tree ? How Does It Work ?","slug":"WhatIsADecisionTreeHowDoesItWork","date":"2018-04-15T10:09:03.000Z","updated":"2020-04-09T07:01:25.748Z","comments":true,"path":"2018/04/15/WhatIsADecisionTreeHowDoesItWork/","link":"","permalink":"https://steven-cheng-com.github.io/2018/04/15/WhatIsADecisionTreeHowDoesItWork/","excerpt":"","text":"&nbsp; Steven Cheng IntroDecision tree is a type of supervised learning algorithm (having a pre-defined target variable) that is mostly used in classification problems. It works for both categorical and continuous input and output variables. In this technique, the population or sample are split into two or more homogeneous sets (or sub-populations) based on most significant splitter differentiator in input variables. ExampleSay we have a sample of 30 students with three variables: Gender (Boy/Girl), Class(IX/X) and Height (5 to 6 ft). 15 out of these 30 play cricket in leisure time. Now, we want to create a model to predict who will play cricket during leisure period? In this problem, we need to segregate students who play cricket in their leisure time based on highly significant input variable among all three. This is where decision tree helps, it will segregate the students based on all values of three variables and identify the variable, which creates the best homogeneous sets of students (which are heterogeneous to each other). In the snapshot below, you can see that variable Gender is able to identify best homogeneous sets compared to the other two variables. As mentioned above, decision tree identifies the most significant variable and its value that gives best homogeneous sets of population. Now the question which arises is, how does it identify the variable and the split? To do this, decision tree uses various algorithms, which we will shall discuss in the following section. Types of Decision TreesTypes of decision tree are based on the type of target variable we have. It can be of two types: 1) Categorical Variable Decision Tree This type of Decision Tree which has categorical target variable then it called as categorical variable decision tree. E.g., in above scenario of student problem, where the target variable was “Student will play cricket or not” i.e. YES or NO. 2) Continuous Variable Decision Tree This type of Decision Tree has continuous target variable then it is called as Continuous Variable Decision Tree. ExampleLet’s say we have a problem to predict whether a customer will pay his renewal premium with an insurance company (yes/no). Here we know that income of a customer is a significant variable but insurance company does not have income details for all customers. Now, as we know this is an important variable, then we can build a decision tree to predict customer income based on occupation, age and various other variables. In this case, we are predicting values for continuous variable. Important TerminologyLet’s look at the basic terminology used with Decision trees: 1) Root Node It represents entire population or sample and this further gets divided into two or more homogeneous sets. 2) Splitting It is a process of dividing a node into two or more sub-nodes. 3) Decision Node When a sub-node splits into further sub-nodes, then it is called decision node. 4) Leaf/Terminal Node Nodes do not split is called Leaf or Terminal node. 5) PruningWhen we remove sub-nodes of a decision node, this process is called pruning. You can say opposite process of splitting. 6) Branch/Sub-Tree A sub section of entire tree is called branch or sub-tree. 7) Parent and Child Node A node, which is divided into sub-nodes is called parent node of sub-nodes where as sub-nodes are the child of parent node. These above are the terms commonly used for decision trees. As we know that every algorithm has advantages and disadvantages, below are the important factors which one should know. Advantages1) Easy to Understand Decision tree output is very easy to understand even for people from non-analytical background. It does not require any statistical knowledge to read and interpret them. Its graphical representation is very intuitive and users can easily relate their hypothesis. 2) Useful in Data Exploration Decision tree is one of the fastest way to identify most significant variables and relation between two or more variables. With the help of decision trees, we can create new variables/features that has better power to predict target variable. For example, we are working on a problem where we have information available in hundreds of variables, there decision tree will help to identify most significant variable. 3) Less Data Cleaning Required It requires less data cleaning compared to some other modeling techniques. It is not influenced by outliers and missing values to a fair degree. 4) Data Type Is Not a Constraint It can handle both numerical and categorical variables. 5) Non Parametric Method Decision tree is considered to be a non-parametric method. This means that decision trees have no assumptions about the space distribution and the classifier structure. Disadvantages1) Over Fitting Over fitting is one of the most practical difficulty for decision tree models. This problem gets solved by setting constraints on model parameters and pruning (discussed in detailed below). 2) Not Fit for Continuous Variables While working with continuous numerical variables, decision tree looses information when it categorizes variables in different categories.","categories":[{"name":"ML","slug":"ML","permalink":"https://steven-cheng-com.github.io/categories/ML/"}],"tags":[{"name":"Tree","slug":"Tree","permalink":"https://steven-cheng-com.github.io/tags/Tree/"},{"name":"Decision Tree","slug":"Decision-Tree","permalink":"https://steven-cheng-com.github.io/tags/Decision-Tree/"}],"author":"Stephen Cheng"}]}