{"meta":{"title":"The Way to Artificial Intelligence","subtitle":"Machine Learning | Deep Learning | NLP | Computer Vision","description":"Dream it. Believe it. Make it.","author":"Stephen Cheng","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Awesome Programming Skills for Python User","slug":"AwesomeProgramminSkillsforPythonUser","date":"2018-12-24T10:22:38.000Z","updated":"2019-11-09T10:25:07.196Z","comments":true,"path":"2018/12/24/AwesomeProgramminSkillsforPythonUser/","link":"","permalink":"http://yoursite.com/2018/12/24/AwesomeProgramminSkillsforPythonUser/","excerpt":"","text":"&nbsp; Stephen Cheng IntroHere are some awesome programming skills shared for Python users. Hopefully it’s useful to you. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126# most frequent element in a lista = [1,2,3,1,2,3,2,2,2,4,5,1]print(max(set(a), key = a.count))# use Counterfrom collections import Countercnt = Counter(a)print(cnt.most_common(3))# check two strings have same charactersfrom collections import Counterstr1 = \"I see him\"str2 = \"him I see\"print(Counter(str1) == Counter(str2))# reverse stringb = 'abcdefghijklmnopqrstuvwxyz'print(b[::-1])for char in reversed(b): print(char)num = 123456789print(int(str(num)[::-1]))# transpose 2d arrayoriginal = [['a','b'], ['1','2'],['A','B']]transposed = zip(*original)print(list(transposed))# call different functions with same argumentsdef product(a,b): return a*bdef add(a,b): return a+bx = Trueprint((product if x else add)(5,7))# a shallow copye = [1,2,3,4,5]d = ed[0] = 10print(d,e)d2 = e[:]d2[0] = 11print(d2,e)# deep copyfrom copy import deepcopyf = [[1,2],[3,4]]f2 = deepcopy(f)f[0] = ['x','y']print(f,f2)# sort a dict by its value with built-in sorted funcg = &#123;'apple':50, 'banana':25, 'orange': 20, 'watermelon':10&#125;print(sorted(g.items(), key = lambda x:x[1]))# use itemgetter instead of a lambdafrom operator import itemgetterprint(sorted(g.items(), key=itemgetter(1)))# sort dict by valueprint(sorted(g, key = g.get))# merge dictd1 = &#123;'x':1&#125;d2 = &#123;'y':2&#125;print(&#123;**d1, **d2&#125;) #python 3.5print(dict(d1.items() | d2.items())) #python 3.5d1.update(d2) #python 3.5 print(d1)# convert list to comma separated stringdata = [1,'re', 3, 'fa', 5]print(','.join(map(str, data)))# find index of min/max elementh = [40, 30, 20, 10, 50]def minIndex(lst): return min(range(len(lst)), key = lst.__getitem__)def maxIndex(lst): return max(range(len(lst)), key = lst.__getitem__)print(minIndex(h))print(maxIndex(h))# remove duplicate items from listi = [6,2,2,3,4,4,4,5]print(list(set(i)))from collections import OrderedDictprint(list(OrderedDict.fromkeys(i).keys()))","categories":[{"name":"Artificial Intelligence","slug":"Artificial-Intelligence","permalink":"http://yoursite.com/categories/Artificial-Intelligence/"},{"name":"Programming","slug":"Artificial-Intelligence/Programming","permalink":"http://yoursite.com/categories/Artificial-Intelligence/Programming/"}],"tags":[{"name":"Code","slug":"Code","permalink":"http://yoursite.com/tags/Code/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"Programming","slug":"Programming","permalink":"http://yoursite.com/tags/Programming/"}],"author":"Stephen Cheng"},{"title":"Decision Trees Implementation in R and Python","slug":"DecisionTreesImplementationinRandPython","date":"2018-08-06T18:58:03.000Z","updated":"2019-11-09T10:27:17.954Z","comments":true,"path":"2018/08/07/DecisionTreesImplementationinRandPython/","link":"","permalink":"http://yoursite.com/2018/08/07/DecisionTreesImplementationinRandPython/","excerpt":"","text":"&nbsp; Stephen Cheng IntroFor R users and Python users, decision tree is quite easy to implement. Let’s quickly look at the set of codes which can get you started with this algorithm. For ease of use, I’ve shared standard codes where you’ll need to replace your dataset name and variables to get started. RFor R users, there are multiple packages available to implement decision tree such as ctree, rpart, tree etc. 1234567891011121314&gt; library(rpart)&gt; x &lt;- cbind(x_train,y_train)# grow tree&gt; fit &lt;- rpart(y_train ~ ., data = x,method=\"class\")&gt; summary(fit)#Predict Output&gt; predicted= predict(fit,x_test)&gt; library(rpart)&gt; x &lt;- cbind(x_train,y_train)# grow tree&gt; fit &lt;- rpart(y_train ~ ., data = x,method=\"class\")&gt; summary(fit)#Predict Output&gt; predicted= predict(fit,x_test) In the code above: y_train – represents dependent variable. x_train – represents independent variable x – represents training data. PythonFor Python users, below is the code: 123456789101112#Import necessary libraries like pandas, numpy...from sklearn import tree#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset# Create tree object# for classification, here you can change the algorithm as gini or entropy (information gain) by default it is gini model = tree.DecisionTreeClassifier(criterion='gini')# model = tree.DecisionTreeRegressor() for regression# Train the model using the training sets and check scoremodel.fit(X, y)model.score(X, y)#Predict Outputpredicted= model.predict(x_test)","categories":[{"name":"Artificial Intelligence","slug":"Artificial-Intelligence","permalink":"http://yoursite.com/categories/Artificial-Intelligence/"},{"name":"Machine Learning","slug":"Artificial-Intelligence/Machine-Learning","permalink":"http://yoursite.com/categories/Artificial-Intelligence/Machine-Learning/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"Decision Tree","slug":"Decision-Tree","permalink":"http://yoursite.com/tags/Decision-Tree/"},{"name":"R","slug":"R","permalink":"http://yoursite.com/tags/R/"}],"author":"Stephen Cheng"},{"title":"Are Tree Based Models Better than Linear Models?","slug":"AreTreeBasedModelsBetterThanLinearModels","date":"2018-07-27T04:44:50.000Z","updated":"2019-11-09T10:23:03.976Z","comments":true,"path":"2018/07/27/AreTreeBasedModelsBetterThanLinearModels/","link":"","permalink":"http://yoursite.com/2018/07/27/AreTreeBasedModelsBetterThanLinearModels/","excerpt":"","text":"&nbsp; Stephen Cheng Intro“If I can use logistic regression for classification problems and linear regression for regression problems, why is there a need to use trees”? Many of us have this question. And, this is a valid one too. How to choose a proper algorithms?Actually, you can use any algorithm. It is dependent on the type of problem you are solving. Let’s look at some key factors which will help you to decide which algorithm to use: 1) If the relationship between dependent &amp; independent variable is well approximated by a linear model, linear regression will outperform tree based model. 2) If there is a high non-linearity &amp; complex relationship between dependent &amp; independent variables, a tree model will outperform a classical regression method. 3) If you need to build a model which is easy to explain to people, a decision tree model will always do better than a linear model. Decision tree models are even simpler to interpret than linear regression!","categories":[{"name":"Artificial Intelligence","slug":"Artificial-Intelligence","permalink":"http://yoursite.com/categories/Artificial-Intelligence/"},{"name":"Machine Learning","slug":"Artificial-Intelligence/Machine-Learning","permalink":"http://yoursite.com/categories/Artificial-Intelligence/Machine-Learning/"}],"tags":[{"name":"Tree model","slug":"Tree-model","permalink":"http://yoursite.com/tags/Tree-model/"},{"name":"Linear model","slug":"Linear-model","permalink":"http://yoursite.com/tags/Linear-model/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://yoursite.com/tags/Machine-Learning/"}],"author":"Stephen Cheng"}]}